0. js解析器运行js步骤：
    .1 预解析  --> js引擎将js中的所有var还有function提升到  ！当前作用域！ 最前
    .2 代码执行  --> 顺序执行代码

    关于预解析：
        变量预解析（变量提升） ： 所有 ！变量声明！ 提升到 ！当前作用域！ 最前，不提升赋值操作
        函数预解析（函数提升） ： 所有 ！函数声明！ 提升到 ！当前作用域！ 最前，不调用函数

    坑：！！
        var a=b=c=9;
        相当于：  var a=9; (局部)
                 b=9;c=9  (全局变量)
        var a=9，b=9， c=9 才是全局部变量


    ！关于 ++a (前置自增)与 a++ （后置自增）
         ++a (前置自增)  ： 先自加，后运算
         a++ （后置自增） ： 先运算，后自加

     b= ++a +2  // ++a=11,b=13,a=11
     b= a++ +2  //a++=10, b=12,a=11

1. 作用域 与 作用域链
    代码名在某个范围内起作用和效果
    es6 之前分为： 全局作用域  ：整个scprit标签或单独js文件起作用
                  局部作用域  ：在函数内部起作用

    作用域链：
        内部函数访问外部函数，采取链式查找的方式来决定取哪个值。（就近原则）
     

2. 简单数据类型 强制转换
    1. 数字型 Number 
        ·进制转换
            八进制 数字前+0   07 //对应十进制7
            十六进制    + 0x  0xA // 10
        ·转换为数字型(重点)
            parseInt(String)       //parseInt('78')
            parseFloat(String)
            Number(String)
            js隐式转换             //'12'-0
    2. 布尔型 Boolean
        Boolean()函数    Boolean('true')
        代表空、否定的值会被转为false，如'',null,0,NaN,undefined,
        其余转换为true
    3. 字符型 String
        String()     //String(a)
        toString()   //a.toString()
        js隐式转换    //12+'22'

3.内置对象 （math中）
    js自带的一些对象，提供一些常用的方法和属性
    js种对象分为3种: 自定义对象、内置对象（Math、String、Date、Array等）、浏览器对象
    查文档 MDN/W3C

4.arguments （math中）
    arguments对象只存在于函数中，用于存储传递过来的实参的值
    arguments是个伪数组， 
      .1 具有数组的length属性
      .2 按照所引发方式进行存储
      .3 没有真正数组的一些方法 pop()、push()等。


5.创建对象的3种方式   
    .1 字面量  
        var a={}
    .2 new Object
    .3 构造函数   (第一个字母大写)
        function Apple(){
            this.name='zhangsan',
            this.age=18,
            this.play=function (){}
        }
        var  a =new Apple()

        new的作用： 1. 构造函数在内存中创造一个空对象
                   2. this指向空对象
                   3. 执行代码给空对象+属性和方法
                   4. 返回对象 （所以构造函数不需要return）


 6. 对象调用属性的方式2种：
    .1 obj.age 对象名.属性名
    .2 obj['age'] 对象名['属性名']


7. 数组 Array  （重点1，2，5，7，8 点！ 添加、删除、索引、转换为字符串、截取/删除个数）
    .1！ 添加数组元素方法(参数为添加的元素值，返回值为数组长度，会改变原数组)： 
        数组！前面！添加一个或多个： arr.unshift(1,'2')
        数组！后面！添加一个或多个： arr.push(参数)

    .2！ 删除数组元素方法(无参数，返回值为删除的那个元素，会改变原数组)： 
        数组！前面！删除一个： arr.shift()
        数组！后面！添加一个： arr.pop()


    .3 颠倒数组reverse()   arr.reverse()

    .4 元素排序sort() 这里的排序按照unicode值排序，需要降序升序排序需要添加函数在参数中。
        arr.sort(function (a, b) {
            // return a - b; //按照升序排列
            return b - a; //按照降序排列
        });
    
    .5！ 数组索引   arr.indexOf('要查找的字符',[起始位])、lastIndexOf()
        arr.indexOf('red')  //返回该数组元素的! 第一个索 !引号 , 没有就返回-1
        arr.lastIndexOf('red')  //返回该数组元素的！最后一个！索引号 , 没有就返回-1 (机制:从后往前查找)

    .6 检测是否为数组
        arr instanceof Array  （检测Array.prototype是否存在于arr的原型链上）
        Array.isArray(arr)
    
    .7！ 数组转换为字符串
        var arr[1,2,3]
        arr.toString()         //逗号分割  1,2,3
        arr.join('-')          //1-2-3 ;不写参数默认 逗号
    
    .8！ 截取和删除个数
        arr.slice(begin,end)       // [0，2）左闭右开，返回一个新的数组，不影响原数组
        arr.splice(开始位置,个数)   //返回被删除数组的新数组，影响原数组

    .9   连接 
        arr1.concat(arr2)   返回一个新数组，不影响原数组

        ES5 数组新增方法：（js高级 04-01）
        .1 !!arr.forEach(value,index,Array)
        .2 !!arr.some(~~~)
        .3 !!arr.filter(~~~)
        .4 arr.map(~~~)
        .5 arr.every(~~~)

8. 基本包装类型 3种 Number、String、Booolean (03.String对象1)
    基本包装类型: 把简单数据类型 包装为 复杂数据类型 这个基本数据类型就有了属性和方法 
    str.length

9. 字符串 String
    .1 字符串不可变  !!
      var str = "red";
      var str ='green';
      //看上去内容可变，其实是地址变了，内存中新开辟了一个内存空间
      //因为字符串不可变所以不要大量拼接字符串 ，每次拼接会产生新的字符串，就会产生新的空间 !!!
    
    .2 根据字符返回位置 (同对象) 
        indexOf('red',2)    indexOf('要查找的字符',[起始位])
        lastIndexOf('red')
    
    .3!! 根据位置返回字符！！
        charAt(index)       返回指定位置字符
        charCodeAt(index)   获取指定位置处字符ASCII码  可用来判断大小写字母
        str[index]          获取指定位置处字符 H5新增 ie8+ 与charAt(等效)
    
    .4 连接和截取！  （都返回字符串，不影响原字符串）
       连接： str.concat('12','34'...)  ，但是连接常用加号
       截取： ！！ str.substr('起始位置',个数)    //   str.substr(0,3) 
              ! ! str.slice(start,end)          //  [ ) 
                  str.substring(start,end)      //  [ ) 值不能为负数

    .5!! 字符串转换为数组  split('分隔符')
      arr=str.split(',')
         与之对应的是 数组转换为字符串 join('字符串')
      arr.join(',')     

    .6  字符替换 replace('被替换字符'，'替换为的字符')   ！只会替换第一个字符 ！
       str.replace('l','i')
       利用循环可以实现全部替换 利用 indexOf(),判断是否还有被替换字符

    .7 大小写转换

10. 简单/基本数据类型 （值类型）和 复杂数据类型 （引用类型）
    简单: Number、String、Booolean、null、undefined
    复杂： 在存储变量中存储的仅仅是地址， 通过new关键字创建的对象（系统对象、自定义对象） Array、object、Date等


    坑::  
      .1 简单数据类型null 返回的是一个空对象 object  !!!
         var timer = null;
            console.log(typeof timer);   //{}  空对象
            用法： 如果有个变量以后打算存储为对象，但是暂时没想好放啥，就给null
      .2 堆栈：(js中其实没有，方便理解)
            简单数据类型--存放到-->栈    
            复杂-->堆                   
        //1. 简单数据类型 是存放在栈里面 里面直接开辟一个空间存放的是值
        //2. 复杂数据类型 首先在栈里面存放地址 十六进制表示 然后这个地址指向堆里面的数据

11. 立即执行函数的两种写法
     (function() {})()
      另一种
      (function (){}())
      多个匿名函数要用 ';' 隔开
      作用： !独立创建了一个作用域，里面所有的都是局部变量，不会又命名冲突的情况

12. pageshow事件 和load事件
    3种刷新页面触发load事件情况： .1 a标签连接
                                .2 F5或者刷新按钮
                                .3 前进后退按钮
    特殊： 火狐中“往返缓存”，将整个页面都保存在内存里面。 此时后退按钮不能重新刷新页面。
    所以 使用 pageshow事件。

    pageshow事件： 
    在页面显示时触发，无论页面是否来自缓存。 在重新加载页面中，pageshow会在load事件触发后触发。
    根据事件对象中presisted来判断是否是缓存中的页面出发的pageshow事件，注意整个事件给window添加。


13. !!!! js执行机制 !!!
    js单线程  
    同步异步
    同步任务: 都在主线程上执行,形成一个执行栈
    异步任务: js的异步都是通过回调函数实现的.一般而言有3种类型:
            .1 普通事件: click,resize等
            .2 资源加载: load,error等
            .3 定时器: setInterval,setTimeout等
            异步任务相关  回调函数 添加到任务队列/消息队列 中.
    
    执行机制:
        1.先执行 执行栈(主线程) 中的同步任务
        2.异步任务(回调函数)放入队列中.  (中途经过 异步进程处理, 处理完成的放入 队列中)
        3.执行栈中所有同步任务执行完毕,系统就按照次序读取 任务队列 中的异步任务,
          于是被读取的异步任务结束等待状态,进入执行栈,开始执行.
        4.事件循环: 主线程不断的重复获得任务再执行任务(去任务队列里拿任务到主线程执行)的机制,称为事件循环(event loop)
