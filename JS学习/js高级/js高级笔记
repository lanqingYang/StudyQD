一、 面向对象问题：
              1. 什么是面向对象
              2. 类和对象的关系
              3.能够使用class创建自定义类
              4.什么是继承

    面向对象特性: 封装、继承、多态性

    1. ES6新增类的概念  使用class声明，之后实例化对象new

        .1 类constructor构造函数 ： constructor()方法是类的构造函数，用于传参，返回对象，通过new命令生成对象实例化对象时，
                                自动调用，如果没有显示定义，会自动创建一个constructor()
                                constructor里面的this指向的时 创建的实例对象
        .2 在ES6中类没有变量提升，所以必须先定义类，才能通过实例化对象

        .3 类里面的属性和方法一定要加this使用！！！！！



二、 构造函数和原型问题：(02-02/03)
                     1.使用构造函数创建对象
                     2.什么是原型以及原型的作用                  一个对象，也称为原型对象----共享方法
                     3.访问对象成员的规则                       （对象成员查找机制 原生链）
                     4.ES5新增的一些方法


    1. 构造函数
     概述： 在es6之前，对象不是通过类，而是通过 构造函数 来定义对象和他们的特征
    （02构造函数和原型-01）
        实例成员：构造函数内部 通过this添加的成员，实例成员只能通过实例化的对象来访问，不可以通过构造函数来访问实例成员
        静态成员： 只能通过构造函数来访问，不能通过对象访问

        构造函数的问题： 存在浪费内存的问题：同样的函数，创建不同的实例就会新去开辟空间

    2. !!!原型对象prototype与 对象原型__proto__：  (对象原型指向原型对象)

        .1原型对象prototype  !!!!
        构造函数原型，为了解决资源浪费的问题
        构造函数原型 prototype
        构造函数通过原型分配的函数是所有对象所共享的(只用开辟一个空间)

        每个构造函数都有一个prototype属性，指向另一个对象。prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有
        所以可以把不变的方法，直接电一在prototype对象上，这样所有对象的实例就可以共享这些方法
    
        ！！！ ps:一般情况下，公共属性定义的到公共函数里面，公共方法放到原型对象上


        .2 !!对象原型:!!!
        对象都会有一个属性 __proto__: 
        指向构造函数的prototype原型对象。
        之所以能够使用构造函数prototype原型对象的属性和方法，就是因为对象有__proto__原型的存在
        对象身上系统自己添加一个__proto__指向构造函数的原型对象 prototype
        console.log(Tanghao.__proto__ === Student.prototype);  //true

    方法的查找规则：首先看实例对象身上是否有study方法，如果有就执行对象上的study方法
    没有该方法，因为有__proto__的存在，就去构造函数prototype身上去查找该方法

    __proto__对象原型的意义在于为对象查找机制提供一个方向，但他是一个非标准属性，所以实际开发不可以使用这个属性。
    他只是内部指向原型对象prototype




    3. constructor构造函数(02-04) 
     它指回回构造函数本身
        .1 目的： 记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数
        .2 将原型对象赋值操作之后，constructor不再指回原来的构造函数
         因为：原来的写法是在 prototype原来的对象上加属性，
        而现在给prototype赋值之后将prototype里的东西全部覆盖掉了，就没有constructor属性了

        例子：
         Student.prototype = {
         //需要自己写constructor 重新指回我们的构造函数
            constructor: Student,
         };


    4. ！！！构造函数、实例、原型对象的关系(对象原型指向原型对象) ,以及  ！！！原型链！！！！！

                                                                                                              ------>null                           
                                                                                                        ---Object原型对象prototype.__proto__          
                                Object构造函数         -----------Object.prototype---->             Object原型对象 prototype
                                                      <-----Object原型对象.constructor---           ---->
                                                                                                 ----
                                                                                          ------Student原型对象prototype.__proto__
                                                                                      --------
        Student构造函数    -------------Student.prototype------>    Student原型对象prototype(存放公共方法)
                          <-----Student.prototype.constructor-- 
              --                                                          -->
                --                                                  --Tanghao.__proto__
                  -->          Student实例对象 Tanghao         --
                        (Tanghao.__proto__.constructor指回构造函数)
 
 
     提问： Tanghao.__proto__.__proto__.__proto__ 为？      ----null

        原型链的意义: 为对象成员查找机制提供一个方向（路线）


    5. ！JavaScript的成员查找机制（规则），见上图：
      .1 当访问一个对象的属性(包括方法)，首先看对象自身有无该属性
      .2 没有就查找它的原型（__proto__指向的prototype原型对象）
      .3 没有就查找原型对象的原型（Object的原型对象）
      .4 依次类推到null为止


    6. 关于原型对象中的this指向
        一般情况下指向 实例对象 

    7. 扩展内置对象(02-07)
        可以通过原型对象，对原来的内置对象进行扩展自定义的方法。
        比如给Array添加sum求和方法

        注意:
        不能给内置对象 Array.prototype = {} 来覆盖原来的内置方法(写了也不会起作用的!)


三、 ES6之前的继承 

    8. !! call（thisArg,arg1,arg2...）   (02-01)
        thisArg： 当前调用函数this的指向对象    agr1..:普通参数

        !作用： 
             .1 调用普通函数  fn.call()
             .2!!  修改函数中的this指向！！
             主要用于实现继承

    9. 模拟继承(03-02)
        ES6之前： 构造函数+原型对象模拟实现继承 ，被称为 组合继承
        核心：通过call()把父类型的this指向子类型的this，这样就可以实现子类型继承父类型的属性

        想要孩子能够拿到父亲原型对象中的方法 Father.prototype.money=function(){}
        Son.prototype=new Father();  利用原型链， Father实例对象的__proto__指向Father.prototype来查找到
        ！！！注意坑 ！！：
        .1 不能Son.prototype=Father.prototype/Father  因为如果修改了子原型对象，父原型对象/父构造函数 也会改变
        .2 利用对象的形式修改了原型对象，别忘了利用costructor 指回原来的构造函数  Son.prototype.constructor=Son


四、ES5新增方法
    10. 数组新增方法：（ 04-01）
        .1 !!arr.forEach(value,index,Array)
        .2 !!arr.some(~~~)
        .3 !!arr.filter(~~~)
        .4 arr.map(~~~)
        .5 arr.every(~~~)

    11. 字符串新增方法：(04-03)
        .1 str.trim() 

    12. 对象新增方法(04-04)
    (对象属性删除可以用 delete.obj.prop)
        .1 Object.keys(obj)    用于获取对象自身所有的属性 类似for..in.. 返回一个由属性名组成的数组
        .2 Object.defineProperty(obj,prop,descriptor) 
             /*  descript说明： 一对象形式{}书写
              value：设置属性值 默认undefined，
              writable：值是否可以重写。true|false 默认false，
              enumerable：目标属性是否可以被枚举。true|false 默认为false
              configurable： 目标属性是否可以被删除或者是否可以再次修改 特性(不允许再修改第三个参数descriptor里面的特性)  true|false 默认false */


五、函数进阶
        问题: 1. 函数多种定义和调用方式
              2. 改变函数内部this的指向
              3. 严格模式特点
              4. 把函数作为参数和返回值传递
              5. 闭包作用
              6. 递归的两个条件
              7. 深拷贝和浅拷贝的区别


    13.函数也属于对象
         Function构造函数    ------------- Function.prototype------>     Function原型对象prototype(存放公共方法)
                          <----- Function.prototype.constructor-- 
              --                                                          -->
                --                                                  --f.__proto__
                  -->          Ftudent实例对象 f         --f     
    
    14. 函数调用方式6种，以及this指向（05-02）

        调用方式                     this指向
      普通函数调用                     window
      构造函数调用                     实例对象，原型对象里面的方法也指向实例对象  Star.prototype.sing=function(){this}
      对象方法调用                     该方法所属对象
      事件绑定方法                     绑定事件对象
      定时器函数                       window
      立即执行函数                     window
                       

    15.改变函数内部this指向 (05-03)
    call()、apply()、bind()
    作用：调用函数;改变函数内部this指向

      .1 call(thisArg,arg1...)  主要用于继承

      .2 apply(thisArg,[arg1,..]或伪数组) 
        应用：（应用它的参数是数组/伪数组）比如说可以利用 apply 借助于数学内置对象求最大值
        var arr = [1, 66, 22, 99];
        var max = Math.max.apply(Math, arr);

      .3 bind(thisArg,arg1...)  ！！！！ 开发里面用得反而最多
        不会调用函数!!!! 
        f = fn.bind(o); //不会有输出，不会调用原来的函数 返回由指定的this值和初始化参数改造的 原函数拷贝
        f(); //调用函数

        如果有的函数不需要立即调用，但是又想改变这个函数的this指向此时用bind()  , 去看（05-03）例子的写法 ！666

        绝妙例子：    
            setTimeout(
                function () {
                this.disabled = false; //要求这个this指向当前btn，而不是window ,用bind改变this的指向 ，指向了btn
                }.bind(this),   //这里的this只的是btn
                2000
             );


        ！！总结： 相同：都可以改变this指向
                  不同： .1 bind不会调用函数，开发中会更常用，call、apply 会调用函数
                         .2 apply 传递的参数第二个是数组/伪数组，其余两个是(thisArg，arg1...)
            主要场景： call ：继承
                      apply： 经常与数组有关，比如借助数学对象实现最大最小值
                      bind： 不调用函数，但是想改变this指向，比如改变定时器内部this的指向


(2020-11-17)
六、严格模式
    16.开始严格模式 'use strict'
      整个脚本开启 <script>'use strict'</script>  在script标签最开头就写'use strict'  ie10以上识别
      某个函数中开启 function(){'use strict' }

    17.!!  this指向(06-02)
          严格模式下，全局作用域中的this是undefined！！！！ (包括构造函数的普通函数调用，也会报错，因为this指向undefined不能被赋值)
          function fn(){console.log(this)}   //this 指向undefined
      
    18. 对函数的要求(06-02)
        不允许出现相同的形参  function(a,a){console.log(a+a)}
        函数声明必须在顶层，ES6中引入‘块级作用域’。为了与新版本接轨，不允许在非函数的代码块内声明函数(比如if块，for块)
          
七、高阶函数（07）
    19. 高阶函数的定义 
      是对其他函数进行操作的函数，它 接收函数作为参数 或 将函数作为返回值输出

八、闭包
    20.闭包概念以及产生（08-01 ）
      闭包：有权访问另一个函数作用域中变量的函数  （闭包是一个函数！！！）
      .1 fun 这个函数作用域 访问了 另一个函数 fn 里面的局部变量num
      被访问的局部变量所在的函数就是闭包函数 所以函数fn就是一个闭包函数
      .2 fn 外面的作用域可以访问fn 内部的局部变量 !  不理解就去看例子(08-01)

      主要作用： 延申了变量的作用范围

      21. 闭包案例
        .1 循环注册点击事件(08-02)  : 立即执行函数也称为小闭包，立即执行函数里的任何函数都可以使用它的参数 (因为立即执行函数每次都会创建不同的空间，所以里面存储的值是不一样的)
        .2 循环中的setTimeout(08-03):  也是对立即执行函数的运用  

      22.判断闭包
        函数中的变量有没有访问另一个函数作用域里面的局部变量
    
    总结: 闭包是一个函数
          闭包的作用： 延申变量的作用范围

(2020-11-18)
九、递归
    23. 概念
        一个函数在内部能够调用其本身，那么这个函数就是递归函数。(就硬套娃，自己调自己) 必须要加退出条件
    
    24.案例（09-02~~~ 09-04）
      深浅拷贝： 浅拷贝：只拷贝一层，更胜层次对象级别的只拷贝引用 
                深拷贝：通过递归，如果遇到数组或者对象属性，就再在里面进行一次浅拷贝，
                        内存空间里面的数据重新复制一份再给新对象，所以修改不会对原来的对象产生影响  

十、正则表达式
   问题： .1 正则表达式的作用
          .2 简单的正则表达式写法
          .3 用正则表达式验证表单
          .4 正则表达式替换内容

    25.创建的两种方式以及测试方法(10-01)
      var reg=new RegExp(/表达式/)
      字面量： var reg=/表达式/    表达式里面不加引号！
      测试方法：reg.test(str)  

    26. 特殊字符和量词和与定义类(10-02~~10-04)
      .1 边界符 ^:以..开头    $:以..结尾  ^$在一起 表示必须是精确匹配  
      .2 字符类：[] 表示有一些列字符可供选择，只要匹配其中的一个就可以了 
                    注意：[^]表示取反
        eg: var rg6 = /^[^a-zA-Z0-9_-]$/; //不能包含a-z,A-Z 大小写字母数字_-任选一个
      .3 量词：{}
              *, + ,? ,{n} ,{n,} ,{n,m}
              ()代表优先级
              /^ab{3}$/;   ---abbb //true
              /^(ab){3}$/;   ---ababab //true
          
      .4预定义类：(10-05)
      \d:[0-9]
      \D:[^0-9]
      \w:[a-zA-Z0-9_-]
      \W:[^a-zA-Z0-9_-]
      \s:匹配空格(包括换行符、制表符、空格符等) [\t\r\n\v\f]
      \S:[^\t\r\n\v\f]
      案例：
       //座机号码验证 两种格式 010-12345678 或者 0630-1234567 
      // 正则里面的或者符号 '|' 注意式一根

    27.替换 replace
      replace()方法，可以实现替换字符串操作，用来替换的参数可以是一个字符串或者是一个正则表达式
      stringObject.replace(regexp/substr,replacement)  但是只能替换第一个！
      
      正则表达式参数：  /表达式/[switch]
      g:全局匹配
      i：忽略大小写
      gi：全局匹配+忽略大小写

      例子：str.replace(/喜欢|可爱/g, "**")  会把str中所有的喜欢和可爱都替换成 **